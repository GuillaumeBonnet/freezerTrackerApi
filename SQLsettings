-- # ---------------------------------------------------------------------------- #
-- #                                  Insert User                                 #
-- # ---------------------------------------------------------------------------- #

INSERT INTO users(id, username, password, is_enabled, email) VALUES (1, 'user', '{noop}password', true, 'bonnet.guillaume.93@gmail.com');
INSERT INTO user_roles (user_id, username, role) VALUES (1, 'user', 'ROLE_USER');


-- # ---------------------------------------------------------------------------- #
-- #                                  User Schema                                 #
-- # ---------------------------------------------------------------------------- #

-- DROP TABLE public.user_roles;
-- DROP TABLE public.users;
CREATE TABLE users(
    id bigint NOT NULL,
    creation_timestamp timestamp without time zone,
    update_timestamp timestamp without time zone,
    username varchar(20) NOT NULL,
    password varchar(68) NOT NULL, -- {bcrypt}$2a$16$FG6taNY52nFgzxMEywt3i.V4lOfI.divA48vWe8vPxkLrWPF6FMF6 => 68
    email varchar(255) NOT NULL,
    is_enabled boolean NOT NULL DEFAULT FALSE,
    CONSTRAINT user_pkey PRIMARY KEY (id)
    CONSTRAINT unique_email UNIQUE (email)
    CONSTRAINT unique_username UNIQUE (username)
);

ALTER TABLE public.users
    OWNER to localherokuuser;

create table user_roles (
  id bigint NOT NULL,
  user_id bigint NOT NULL,
  role varchar(20) NOT NULL,
  UNIQUE (id,role),
  CONSTRAINT user_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

ALTER TABLE public.user_roles
    OWNER to localherokuuser;

-- # ---------------------------------------------------------------------------- #
-- #                     -- FUNCTION: public.insert_ts_func()                     #
-- # ---------------------------------------------------------------------------- #

-- DROP FUNCTION public.insert_ts_func();

CREATE FUNCTION public.insert_ts_func()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF 
AS $BODY$
BEGIN
    NEW.creation_timestamp = now();
    NEW.update_timestamp = NEW.creation_timestamp;
	RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public.insert_ts_func()
    OWNER TO xakqxrognahxgw;

-- # ---------------------------------------------------------------------------- #
-- #                     -- FUNCTION: public.update_ts_func()                     #
-- # ---------------------------------------------------------------------------- #

-- DROP FUNCTION public.update_ts_func();

CREATE FUNCTION public.update_ts_func()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF 
AS $BODY$
BEGIN
    NEW.update_timestamp = NOW();
	RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public.update_ts_func()
    OWNER TO xakqxrognahxgw;

-- # ---------------------------------------------------------------------------- #
-- #                                   Triggers                                   #
-- # ---------------------------------------------------------------------------- #
-- SQL for triggers using the functions are now generated with the scripts/SQL-generateTriggers.js

