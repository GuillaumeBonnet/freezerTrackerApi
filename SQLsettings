-- # ---------------------------------------------------------------------------- #
-- #                                  Insert User                                 #
-- # ---------------------------------------------------------------------------- #

INSERT INTO users(id, username, password, is_enabled, email) VALUES (1, 'user', '{noop}password', true, 'bonnet.guillaume.93@gmail.com');
INSERT INTO user_roles (user_id, username, role) VALUES (1, 'user', 'ROLE_USER');


-- # ---------------------------------------------------------------------------- #
-- #                                  User Schema                                 #
-- # ---------------------------------------------------------------------------- #

-- DROP TABLE public.user_roles;
-- DROP TABLE public.users;
CREATE TABLE users2(
    id bigint NOT NULL,
    creation_timestamp timestamp without time zone,
    update_timestamp timestamp without time zone,
    username varchar(20) NOT NULL,
    password varchar(20) NOT NULL,
    email varchar(255) NOT NULL,
    is_enabled boolean NOT NULL DEFAULT FALSE,
    CONSTRAINT user_pkey PRIMARY KEY (id)
    CONSTRAINT unique_email UNIQUE (email)
);

ALTER TABLE public.user_roles
    OWNER to localherokuuser;

create table user_roles (
  id SERIAL PRIMARY KEY,
  user_id bigint NOT NULL,
  username varchar(20) NOT NULL,
  role varchar(20) NOT NULL,
  UNIQUE (id,role),
  CONSTRAINT user_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

ALTER TABLE public.user_roles
    OWNER to localherokuuser;


-- # ---------------------------------------------------------------------------- #
-- #                        -- Trigger: beforeInsertUser                       #
-- # ---------------------------------------------------------------------------- #

-- DROP TRIGGER "beforeInsertUser" ON public.user;

CREATE TRIGGER "beforeInsertUser"
    BEFORE INSERT
    ON public.users
    FOR EACH ROW
    EXECUTE PROCEDURE public.insert_ts_func();

    
-- # ---------------------------------------------------------------------------- #
-- #                        -- Trigger: beforeUpdateUser                       #
-- # ---------------------------------------------------------------------------- #

-- DROP TRIGGER "beforeUpdateUser" ON public.user;

CREATE TRIGGER "beforeUpdateUser"
    BEFORE UPDATE 
    ON public.users
    FOR EACH ROW
    EXECUTE PROCEDURE public.update_ts_func();


-- # ---------------------------------------------------------------------------- #
-- #                     -- FUNCTION: public.insert_ts_func()                     #
-- # ---------------------------------------------------------------------------- #

-- DROP FUNCTION public.insert_ts_func();

CREATE FUNCTION public.insert_ts_func()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF 
AS $BODY$
BEGIN
    NEW.creation_timestamp = now();
    NEW.update_timestamp = NEW.creation_timestamp;
	RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public.insert_ts_func()
    OWNER TO xakqxrognahxgw;


    


-- # ---------------------------------------------------------------------------- #
-- #                     -- FUNCTION: public.update_ts_func()                     #
-- # ---------------------------------------------------------------------------- #

-- DROP FUNCTION public.update_ts_func();

CREATE FUNCTION public.update_ts_func()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF 
AS $BODY$
BEGIN
    NEW.update_timestamp = NOW();
	RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public.update_ts_func()
    OWNER TO xakqxrognahxgw;



-- # ---------------------------------------------------------------------------- #
-- #                        -- Trigger: beforeInsertAliment                       #
-- # ---------------------------------------------------------------------------- #

-- DROP TRIGGER "beforeInsertAliment" ON public.aliment;

CREATE TRIGGER "beforeInsertAliment"
    BEFORE INSERT
    ON public.aliment
    FOR EACH ROW
    EXECUTE PROCEDURE public.insert_ts_func();




-- # ---------------------------------------------------------------------------- #
-- #                        -- Trigger: beforeUpdateAliment                       #
-- # ---------------------------------------------------------------------------- #

-- DROP TRIGGER "beforeUpdateAliment" ON public.aliment;

CREATE TRIGGER "beforeUpdateAliment"
    BEFORE UPDATE 
    ON public.aliment
    FOR EACH ROW
    EXECUTE PROCEDURE public.update_ts_func();




-- # ---------------------------------------------------------------------------- #
-- #                        -- Trigger: beforeInsertFreezer                       #
-- # ---------------------------------------------------------------------------- #

-- DROP TRIGGER "beforeInsertFreezer" ON public.freezer;

CREATE TRIGGER "beforeInsertFreezer"
    BEFORE INSERT
    ON public.freezer
    FOR EACH ROW
    EXECUTE PROCEDURE public.insert_ts_func();


    

-- # ---------------------------------------------------------------------------- #
-- #                        -- Trigger: beforeUpdateFreezer                       #
-- # ---------------------------------------------------------------------------- #

-- DROP TRIGGER "beforeUpdateFreezer" ON public.freezer;

CREATE TRIGGER "beforeUpdateFreezer"
    BEFORE UPDATE 
    ON public.freezer
    FOR EACH ROW
    EXECUTE PROCEDURE public.update_ts_func();
